>>> HOW TO ACHIEVE DIFFERENT LAYOUTS IN DIFFERENT RESPONSIVE BREAKPOINTS?
     
    By using class name prefixes

extra small devices	col-
small devices		col-sm-
medium devices		col-md-
large devices		col-lg-
extra large devices	col-xl-

If we define the behaviour of the Bootstrap Grid Column in a particular device, similar behaviour is guaranteed in all devices with larger sizes.

>>> Class names in combination:

	We can use a combination of different Bootstrap class names for each Bootstrap Grid 	Column.

    <div class="container">
      <div class="row">
        <div class="col-12 col-lg-6">
          <h1 class="heading">Taj Mahal</h1>
          <p>The Taj Mahal is on the southern bank of the river Yamuna.</p>
        </div>
        <div class="col-12 col-lg-6">
          <h1 class="heading">Mysore Palace</h1>
          <p>
            The Mysore Palace is a historical palace and the royal residence at
            Mysore.
          </p>
        </div>
        <div class="col-12 col-lg-6">
          <h1 class="heading">Golden Temple</h1>
          <p>The Golden Temple is a gurdwara located in the city of Amritsar.</p>
        </div>
        <div class="col-12 col-lg-6">
          <h1 class="heading">Varanasi</h1>
          <p>Varanasi is also known as Benares or Kashi. It is a city located on the bank 		 of the river Ganges in Uttar Pradesh.</p>
        </div>
      </div>
    </div>

Bootstrap follows Mobile First Approach.

First, design the Layout of a mobile version, and this will be adopted by devices with larger sizes.

>>> To get space only on one particular side, we use Margin Variants.

	margin-top
	margin-right
	margin-bottom
	margin-left

>>> Bootstrap Spacing Utilities:
	
	margin		m-*
	margin-top		mt-*
	margin-right	mr-*
	margin-bottom	mb-*
	margin-left		ml-*

The asterisk (*) symbol can be any number in the range of 0 to 5. For example, m-5, mr-2, mb-3, etc.

Margin Values :

	Size		Value
	0		0
	1		0.25 * spacer
	2		0.5 * spacer
	3		1 * spacer
	4		1.5 * spacer
	5		3 * spacer

The spacer is a variable and has a value of 16 pixels by default.

For example, mb-3 = 1 * 16px = 16px
		 m-5 = 3 * 16px = 48px

Avoid using CSS "margin-left" and "margin-right" properties for Bootstrap Grid Columns. It disturbs the Bootstrap Grid System and gives unexpected results.

>> Padding :

	CSS Padding property	Bootstrap class name
	padding				p-*
	padding-top				pt-*
	padding-right			pr-*
	padding-bottom			pb-*
	padding-left			pl-*

The asterisk (*) symbol can be any number in the range of 0 to 5. For example, p-3, pr-1, pb-5, etc.

>>> Padding Values :
	Size		Value
	0		0				0px
	1		0.25 * spacer		4px
	2		0.5 * spacer		8px
	3		1 * spacer			16px
	4		1.5 * spacer		24px
	5		3 * spacer			48px

The spacer is a variable and has a value of 16 pixels by default.

For example, p-1 = 0.25 * 16px = 4px
		 pt-4 = 1.5 * 16px = 24px

..........................................................................................

BOOTSTRAP NAVBAR :

The 'nav' element is a container element similar to div element, it used to add a navigation to our website.

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="#">Navbar</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
          <a class="nav-link active" href="#">
            Home
            <span class="sr-only">(current)</span>
          </a>
          <a class="nav-link" href="#">Features</a>		#change the name here
          <a class="nav-link" href="#">Pricing</a>
          <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a> 								# can be removed                 
        </div>
      </div>
    </nav>

>>> HTML Elements
	
    In general, HTML elements can be divided into two categories.

		Block-level Elements
		Inline Elements

>>> Block-level Elements :
	
	These elements always start in a new line and take up the full width available. So, an HTML Block-level element occupies the entire horizontal space of its parent element.

For example, the HTML "h1" element, "p" element, "div" element, etc.


>>> Inline Elements :

	These elements do not start in a new line and only take up as much width as necessary.

For example, the HTML "button" element, "img" element, "a" element, etc.

>> Margin :

We can align HTML Block-level elements horizontally using CSS margin property.

Apart from values that are specified in pixels, it also accepts auto keyword as a value.

Note: If we specify the CSS text-align property to the HTML Block-level element, it aligns 	the text or HTML Inline elements inside it.

~~ Using auto as a value for the CSS margin-right property takes up all the available space, and the element gets aligned to the left.

~~ Using auto as a value for the CSS margin-left property takes up all the available space, and the element gets aligned to the right.
 
~~ Apart from the numbers 0-5, the margin also has the below Bootstrap class names.

	m-auto
	ml-auto
	mr-auto

>> Step by Step Process to build a Navbar
	
	Step-1: Adding Bootstrap Navbar Component

	Step-2: Adding Logo

	Step-3: Aligning Nav Items

	Step-4: Changing Navbar Background color